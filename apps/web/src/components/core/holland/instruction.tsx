"use client";

import Image from "next/image";
import { Button } from "@highschool/ui/components/ui/button";
import {
  IconArrowRight,
  IconCheck,
  IconQuestionMark,
} from "@tabler/icons-react";
import { motion } from "framer-motion";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@highschool/ui/components/ui/dropdown-menu";
import { cn } from "@highschool/ui/lib/utils";

import { Container } from "../layouts/container";
import { Hint } from "../common/hint";

import { useHollandTestContext } from "@/stores/use-holland-test-store";

export enum HollandTrait {
  Realistic = "Realistic",
  Investigative = "Investigative",
  Artistic = "Artistic",
  Social = "Social",
  Enterprising = "Enterprising",
  Conventional = "Conventional",
}

interface InstructionProps {
  onClose: () => void;
}

export const Instruction = ({ onClose }: InstructionProps) => {
  const userAnswers = useHollandTestContext((s) => s.userTestAnswers);

  // Color mapping for Holland traits
  const hollandColors: Record<HollandTrait, string> = {
    [HollandTrait.Realistic]: "bg-blue-500 hover:bg-blue-600",
    [HollandTrait.Investigative]: "bg-purple-500 hover:bg-purple-600",
    [HollandTrait.Artistic]: "bg-pink-500 hover:bg-pink-600",
    [HollandTrait.Social]: "bg-green-500 hover:bg-green-600",
    [HollandTrait.Enterprising]: "bg-amber-500 hover:bg-amber-600",
    [HollandTrait.Conventional]: "bg-teal-500 hover:bg-teal-600",
  };

  const hollandIcons: Record<HollandTrait, string> = {
    [HollandTrait.Realistic]: "üîß",
    [HollandTrait.Investigative]: "üîç",
    [HollandTrait.Artistic]: "üé®",
    [HollandTrait.Social]: "üë•",
    [HollandTrait.Enterprising]: "üíº",
    [HollandTrait.Conventional]: "üìä",
  };

  return (
    <Container className="relative mt-10 flex items-center" maxWidth="5xl">
      <motion.div
        animate={{ translateY: 0, opacity: 1 }}
        className="w-full"
        initial={{ translateY: -20, opacity: 0.5 }}
      >
        <div className="mb-8 flex w-full items-center justify-between">
          <DropdownMenu>
            <DropdownMenuTrigger>
              <Hint label="H∆∞·ªõng d·∫´n">
                <Button
                  className="rounded-full shadow-lg"
                  size={"icon"}
                  variant={"outline"}
                >
                  <IconQuestionMark />
                </Button>
              </Hint>
            </DropdownMenuTrigger>
            <DropdownMenuContent
              align="start"
              className="border-none p-0 shadow-none"
            >
              <div className="w-96 overflow-hidden rounded-lg border-2 border-gray-200 bg-white shadow-lg dark:border-gray-800/50 dark:bg-gray-800">
                <div className="space-y-4 p-4 sm:space-y-6 sm:p-6">
                  <h2 className="text-center text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white">
                    H∆∞·ªõng d·∫´n
                  </h2>
                  <div className="space-y-3 sm:space-y-4">
                    <p className="text-base text-gray-600 sm:text-lg dark:text-gray-300">
                      Ho√†n th√†nh b√†i ki·ªÉm tra ch·ªâ m·∫•t kho·∫£ng 15 ph√∫t. Sau ƒë√¢y l√†
                      m·ªôt s·ªë g·ª£i √Ω v·ªÅ c√°ch ho√†n th√†nh b√†i ki·ªÉm tra n√†y:
                    </p>
                    <ul className="space-y-2 sm:space-y-3">
                      {[
                        "Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ƒë√∫ng cho b·∫•t k·ª≥ c√¢u h·ªèi n√†o trong s·ªë n√†y.",
                        "Tr·∫£ l·ªùi c√°c c√¢u h·ªèi m·ªôt c√°ch nhanh ch√≥ng, ƒë·ª´ng ph√¢n t√≠ch qu√° m·ª©c. M·ªôt s·ªë c√¢u h·ªèi c√≥ v·∫ª ƒë∆∞·ª£c di·ªÖn ƒë·∫°t kh√¥ng t·ªët. H√£y l√†m theo c√°ch b·∫°n c·∫£m th·∫•y t·ªët nh·∫•t.",
                        'Tr·∫£ l·ªùi c√¢u h·ªèi theo "con ng∆∞·ªùi b·∫°n", ch·ª© kh√¥ng ph·∫£i "con ng∆∞·ªùi b·∫°n mu·ªën ng∆∞·ªùi kh√°c nh√¨n nh·∫≠n".',
                      ].map((tip, index) => (
                        <li
                          key={index}
                          className="flex items-start space-x-2 sm:space-x-3"
                        >
                          <IconCheck className="mt-1 size-5 shrink-0 text-green-500" />
                          <span className="text-sm text-gray-700 sm:text-base dark:text-gray-200">
                            {tip}
                          </span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </DropdownMenuContent>
          </DropdownMenu>
          <div
            className="border-primary group cursor-pointer rounded-xl border-4  bg-transparent p-1 transition-all duration-500"
            rel="noopener noreferrer"
          >
            <Button
              className="relative gap-2 !text-base"
              variant="default"
              onClick={onClose}
            >
              {userAnswers.length > 0 ? "Ti·∫øp t·ª•c" : "B·∫Øt ƒë·∫ßu ngay"}
              <IconArrowRight size="16" />
              <div
                className={cn(
                  "absolute -left-16 top-0 h-full w-12 rotate-[30deg] scale-y-150 bg-white/10 transition-all duration-700 group-hover:left-[calc(100%+1rem)]",
                )}
              />
            </Button>
          </div>
        </div>
        <div>
          <div className="mb-8 flex items-center justify-center">
            <div className="via-primary mr-4 h-1 w-24 bg-gradient-to-r from-transparent to-transparent" />
            <h2 className="text-2xl font-bold"> M√¥ h√¨nh ngh·ªÅ nghi·ªáp Holland</h2>
            <div className="from-primary via-primary ml-4 h-1 w-24 bg-gradient-to-r to-transparent" />
          </div>

          <div className="mx-auto grid max-w-5xl grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            {Object.values(HollandTrait).map((trait) => (
              <div
                key={trait}
                className="group relative overflow-hidden rounded-xl shadow-lg transition-all duration-300 hover:shadow-xl"
              >
                <div
                  className={`absolute inset-0 ${hollandColors[trait]} opacity-90`}
                />
                <div className="relative flex h-full flex-col items-center p-6 text-white">
                  <div className="mb-4 text-4xl">{hollandIcons[trait]}</div>
                  <h3 className="mb-2 text-xl font-bold">{trait}</h3>
                  <div className="mb-4 h-1 w-12 rounded bg-white/50" />
                  <div className="text-center">
                    <p className="text-sm opacity-90">
                      {trait === HollandTrait.Realistic &&
                        "Th·ª±c t·∫ø, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ b·∫±ng tay v√† h√†nh ƒë·ªông"}
                      {trait === HollandTrait.Investigative &&
                        "Ph√¢n t√≠ch, tr√≠ tu·ªá, th√≠ch nghi√™n c·ª©u"}
                      {trait === HollandTrait.Artistic &&
                        "S√°ng t·∫°o, ƒë·ªôc l·∫≠p, c√≥ t∆∞ duy nguy√™n b·∫£n"}
                      {trait === HollandTrait.Social &&
                        "Ng∆∞·ªùi gi√∫p ƒë·ª°, gi√°o vi√™n, ng∆∞·ªùi chƒÉm s√≥c"}
                      {trait === HollandTrait.Enterprising &&
                        "L√£nh ƒë·∫°o, thuy·∫øt ph·ª•c, ng∆∞·ªùi ƒë∆∞a ra quy·∫øt ƒë·ªãnh"}
                      {trait === HollandTrait.Conventional &&
                        "Ng∆∞·ªùi t·ªï ch·ª©c, l·∫≠p k·∫ø ho·∫°ch, ch√∫ tr·ªçng ƒë·∫øn chi ti·∫øt"}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </motion.div>
      <div className="absolute -right-16 top-16 h-[120px] w-[180px] sm:h-[140px] sm:w-[220px] md:h-[170px] md:w-[240px]">
        <Image
          fill
          alt="Linh v·∫≠t c√° voi laptop"
          className="object-bottom-left object-contain"
          sizes="(max-width: 640px) 170px, (max-width: 768px) 200px, 240px"
          src="/images/mascot/laptop-whale.png"
        />
      </div>
    </Container>
  );
};
